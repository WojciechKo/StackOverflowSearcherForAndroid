buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.4"
        classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "info.korzeniowski.stackoverflow.searcher"
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    signingConfigs {
        config {
            keyAlias signingKeyAlias
            storePassword signingStorePassword
            keyPassword signingKeyPassword
            storeFile file(signingStoreFile)
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
        }
    }
}

apply plugin: 'com.neenbedankt.android-apt'

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName android.defaultConfig.applicationId
    }
}

apply plugin: 'org.robolectric'

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    maxHeapSize = '2048m'
    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'

    maxParallelForks = 4
    forkEvery = 150
    ignoreFailures true

    afterTest { descriptor, result ->
        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
    }
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    jcenter()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'

    // Guava
    compile 'com.google.guava:guava:18.0'

    // Butter Knife
    compile 'com.jakewharton:butterknife:6.1.0'

    // Picasso
    compile 'com.squareup.picasso:picasso:2.5.0'

    // Otto
    compile 'com.squareup:otto:1.3.6'

    // Retrofit
    compile 'com.squareup.retrofit:retrofit:1.6.1'

    // OKHttp
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'

    def autoParcelVersion = '0.3'
    compile "com.github.frankiesardo:auto-parcel:$autoParcelVersion"
    apt "com.github.frankiesardo:auto-parcel-processor:$autoParcelVersion"

    // Dagger
    def daggerVersion = '2.0-SNAPSHOT'
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    testCompile "com.google.dagger:dagger-compiler:$daggerVersion"
    compile "com.google.dagger:dagger:$daggerVersion"
    testCompile "com.google.dagger:dagger-compiler:$daggerVersion"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // JUnit
    testCompile 'junit:junit:4.12'

    // Mockito
    testCompile 'org.mockito:mockito-core:1.9.5'

    // Robolectric
    def robolectricVersion = '3.0-SNAPSHOT'
    testCompile "org.robolectric:shadows-support-v4:$robolectricVersion"
    testCompile "org.robolectric:robolectric:$robolectricVersion"

    //Fest Android
    testCompile 'com.squareup:fest-android:1.0.8'
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
}

apply plugin: 'idea'

idea {
    module {
        downloadSources = true
    }
}
